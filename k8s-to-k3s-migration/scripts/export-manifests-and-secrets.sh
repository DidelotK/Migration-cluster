#!/bin/bash
set -euo pipefail

# Script simple d'export des manifests et secrets
# Simple script to export manifests and secrets

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
EXPORT_DIR="$PROJECT_ROOT/k8s-to-k3s-migration/exported-manifests"

# Configuration
SOURCE_KUBECONFIG="${SOURCE_KUBECONFIG:-$PROJECT_ROOT/kubeconfig-keltio-prod.yaml}"

echo "üöÄ Export des manifests et secrets"
echo "=================================="

case "${1:-help}" in
    "check")
        echo "üîç V√©rification des pr√©requis..."
        if [[ ! -f "$SOURCE_KUBECONFIG" ]]; then
            echo "‚ùå Kubeconfig source manquant: $SOURCE_KUBECONFIG"
            exit 1
        fi
        echo "‚úÖ Kubeconfig source trouv√©"
        
        if ! command -v kubectl >/dev/null 2>&1; then
            echo "‚ùå kubectl non install√©"
            exit 1
        fi
        echo "‚úÖ kubectl disponible"
        
        echo "üîó Test de connectivit√© (timeout 10s)..."
        if kubectl --kubeconfig="$SOURCE_KUBECONFIG" --request-timeout=10s get nodes >/dev/null 2>&1; then
            echo "‚úÖ Cluster source accessible"
        else
            echo "‚ö†Ô∏è  Cluster source non accessible (token expir√© ou cluster arr√™t√©)"
            echo "üí° Utilisez le mode 'simulate' pour tester la fonctionnalit√©"
        fi
        ;;
        
    "structure")
        echo "üìÅ Cr√©ation de la structure d'export..."
        rm -rf "$EXPORT_DIR"
        mkdir -p "$EXPORT_DIR"/{namespaces,secrets,manifests,cluster-resources,raw-exports}
        
        cat > "$EXPORT_DIR/README.md" <<EOF
# Export des Manifests K8s

**Date:** $(date)

## Structure

- \`namespaces/\` - Manifests par namespace
- \`secrets/\` - Secrets export√©s
- \`manifests/\` - Manifests nettoy√©s pour K3s
- \`cluster-resources/\` - Ressources cluster
- \`raw-exports/\` - Exports bruts

## ‚ö†Ô∏è S√©curit√©

Ce r√©pertoire peut contenir des secrets sensibles.
Ne pas commiter dans Git.

EOF
        echo "‚úÖ Structure d'export cr√©√©e: $EXPORT_DIR"
        ;;
        
    "simulate")
        echo "üß™ Mode simulation (donn√©es fictives)..."
        
        # Cr√©er la structure
        rm -rf "$EXPORT_DIR"
        mkdir -p "$EXPORT_DIR"/{namespaces/vaultwarden,secrets/vaultwarden,manifests/vaultwarden}
        
        # Manifest simul√©
        cat > "$EXPORT_DIR/namespaces/vaultwarden/statefulset.yaml" <<'EOF'
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vaultwarden
  namespace: vaultwarden
spec:
  serviceName: vaultwarden
  replicas: 1
  selector:
    matchLabels:
      app: vaultwarden
  template:
    metadata:
      labels:
        app: vaultwarden
    spec:
      containers:
      - name: vaultwarden
        image: vaultwarden/server:1.30.1
        ports:
        - containerPort: 80
EOF

        # Secret simul√©
        cat > "$EXPORT_DIR/secrets/vaultwarden/secret.yaml" <<'EOF'
apiVersion: v1
kind: Secret
metadata:
  name: vaultwarden-secret
  namespace: vaultwarden
type: Opaque
data:
  admin_token: VE9LRU4=
EOF

        # Manifest nettoy√©
        cp "$EXPORT_DIR/namespaces/vaultwarden/statefulset.yaml" "$EXPORT_DIR/manifests/vaultwarden/statefulset-clean.yaml"
        
        # R√©sum√©
        cat > "$EXPORT_DIR/migration-summary.md" <<EOF
# R√©sum√© de Migration (Simulation)

**Date:** $(date)

## Namespaces Export√©s

- **vaultwarden**: 1 StatefulSet, 1 Secret

## Prochaines √âtapes

1. Configurer les secrets r√©els
2. Adapter les manifests pour K3s
3. D√©ployer: \`kubectl apply -f manifests/\`

EOF
        
        echo "‚úÖ Export simul√© cr√©√©"
        echo "üìÅ R√©pertoire: $EXPORT_DIR"
        echo "üìã R√©sum√©: $EXPORT_DIR/migration-summary.md"
        ;;
        
    "from-k3s")
        echo "üì§ Export depuis cluster K3s (√©tat actuel)..."
        
        KUBECONFIG_K3S="$PROJECT_ROOT/kubeconfig-target.yaml"
        if [[ ! -f "$KUBECONFIG_K3S" ]]; then
            echo "‚ùå Kubeconfig K3s manquant: $KUBECONFIG_K3S"
            echo "üí° Ex√©cutez: ./k8s-to-k3s-migration/scripts/get-k3s-kubeconfig-simple.sh"
            exit 1
        fi
        
        rm -rf "$EXPORT_DIR"
        mkdir -p "$EXPORT_DIR"/{namespaces,secrets,manifests}
        
        # Export Vaultwarden depuis K3s
        echo "üì¶ Export Vaultwarden..."
        mkdir -p "$EXPORT_DIR/namespaces/vaultwarden"
        
        kubectl --kubeconfig="$KUBECONFIG_K3S" get statefulsets -n vaultwarden -o yaml > "$EXPORT_DIR/namespaces/vaultwarden/statefulsets.yaml" 2>/dev/null || echo "‚ö†Ô∏è Pas de StatefulSets"
        kubectl --kubeconfig="$KUBECONFIG_K3S" get services -n vaultwarden -o yaml > "$EXPORT_DIR/namespaces/vaultwarden/services.yaml" 2>/dev/null || echo "‚ö†Ô∏è Pas de Services"
        kubectl --kubeconfig="$KUBECONFIG_K3S" get ingress -n vaultwarden -o yaml > "$EXPORT_DIR/namespaces/vaultwarden/ingress.yaml" 2>/dev/null || echo "‚ö†Ô∏è Pas d'Ingress"
        
        # Export secrets (m√©tadonn√©es seulement)
        mkdir -p "$EXPORT_DIR/secrets/vaultwarden"
        kubectl --kubeconfig="$KUBECONFIG_K3S" get secrets -n vaultwarden -o yaml | \
            sed 's/data:/# data: # REMOVED FOR SECURITY/' > "$EXPORT_DIR/secrets/vaultwarden/secrets-metadata.yaml" 2>/dev/null || echo "‚ö†Ô∏è Pas de secrets"
        
        echo "‚úÖ Export K3s termin√©"
        echo "üìÅ R√©pertoire: $EXPORT_DIR"
        ;;
        
    "full")
        echo "üîÑ Export complet..."
        "$0" structure
        echo ""
        echo "‚ö†Ô∏è  Export depuis cluster source non impl√©ment√© (cluster non accessible)"
        echo "üí° Utilisez:"
        echo "  - '$0 simulate' pour tester"
        echo "  - '$0 from-k3s' pour exporter l'√©tat K3s actuel"
        ;;
        
    *)
        echo "Usage: $0 [check|structure|simulate|from-k3s|full]"
        echo ""
        echo "Commands:"
        echo "  check     - V√©rifier les pr√©requis"
        echo "  structure - Cr√©er la structure d'export"
        echo "  simulate  - Cr√©er un export simul√© (test)"
        echo "  from-k3s  - Exporter depuis cluster K3s actuel"
        echo "  full      - Export complet (d√©faut)"
        echo ""
        echo "Le script d'export permet de r√©cup√©rer les manifests et secrets"
        echo "depuis un cluster Kubernetes pour les migrer vers K3s."
        exit 1
        ;;
esac